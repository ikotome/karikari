@using Microsoft.JSInterop
@using System.Text.Json
@using Shogendar.Karikari.Models

@inject DialogService DialogService
@inject IJSRuntime JSRuntime
@page "/"

<ItemContainer Item=@TotalAmount>
    <WalletCard Amount=@TotalAmount />
</ItemContainer>
<hr />
<ItemContainer Item=@Loans>
    <RadzenTable GridLines="DataGridGridLines.Vertical" AllowAlternatingRows="false">
        <RadzenTableHeader>
            <RadzenTableHeaderRow>
                <RadzenTableHeaderCell>名前</RadzenTableHeaderCell>
                <RadzenTableHeaderCell>金額</RadzenTableHeaderCell>
            </RadzenTableHeaderRow>
        </RadzenTableHeader>
        <RadzenTableBody>
            @foreach (var loan in Loans)
            {
                                                <RadzenTableRow>
                                                    <RadzenTableCell>@loan.Payer.Name</RadzenTableCell>
                                                    <RadzenTableCell>@loan.Amount</RadzenTableCell>
                                                    <RadzenTableCell>
                                                        <RadzenLink Text="詳しく" Variant="Variant.Outlined"  Style="ButtonStyle.Info" Path=@($"loanDetails/{loan.Id}") />
                                                    </RadzenTableCell>
                                                </RadzenTableRow>
            }
        </RadzenTableBody>
    </RadzenTable>
</ItemContainer>

<FloatingButton Click="OnFloatingButtonClicked" />
@code {
    public IEnumerable<Loan> Loans { get; set; }
    public decimal? TotalAmount { get; set; }
    public async Task OnLoginClicked()
    {
        await LocalUser.Instance.Login();
    }
    public async Task OnLogoutClicked()
    {
        await Task.Run(() => LocalUser.Instance.Logout());
    }
    private async void OnFloatingButtonClicked()
    {
        await DialogService.OpenAsync<NewLoan>($"貸し借り",
        new Dictionary<string, object>() { },
        new DialogOptions()
        {
            Width = "10%",
            Height = "10%"
        });
    }
    protected override async Task OnInitializedAsync()
    {
        Loans = await APIClient.Instance.GetLoans(LocalUser.Instance.User);
        TotalAmount = Loans.Sum(l => l.Amount);
    }
}